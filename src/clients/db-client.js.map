{"version":3,"file":"db-client.js","sourceRoot":"","sources":["db-client.ts"],"names":[],"mappings":";;AAAA,2BAA0B;AAC1B,MAAM,aAAa,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC;AAExD,2CAAmC;AASnC,MAAqB,QAAQ;IAKzB,YAAY,OAAwB;QAChC,IAAI,CAAC,SAAS,GAAG,IAAI,WAAM,CAAC;YACxB,IAAI,EAAE,WAAW;YACjB,QAAQ,EAAE,KAAK;YACf,IAAI,EAAE,UAAU;SACnB,CAAC,CAAC;QACH,IAAI,CAAC,GAAG,GAAG,IAAI,mBAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACjD,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,OAAO,CAAC;QACvC,IAAI,CAAC,cAAc,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAClE,CAAC;IAED,KAAK,CAAC,IAAI;QACN,MAAM,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;IACnC,CAAC;IAED,SAAS,CAAC,KAAY,EAAE,QAAe;QACnC,OAAO,GAAG,KAAK,IAAI,QAAQ,EAAE,CAAC;IAClC,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,KAAW;QACnB,wCAAwC;QACxC,kDAAkD;QAClD,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAEvC,gDAAgD;QAChD,OAAO,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EACpD,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IAEtC,CAAC;IACD,UAAU;QACN,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;IAE9B,CAAC;IACD,WAAW,CAAC,UAAkB;QAC1B,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED,WAAW;QACP,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IACjD,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,OAAsB;QAChC,iDAAiD;QACjD,2CAA2C;QAC3C,MAAM,MAAM,GAAG,8HAA8H,CAAC;QAC9I,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;YACtC,IAAI,EAAE,MAAM;YACZ,MAAM,EAAE,CAAC,OAAO,CAAC,SAAS,GAAC,IAAI,EAAE,OAAO,CAAC,OAAO,GAAC,IAAI,EAAE,OAAO,CAAC,MAAM,CAAC;SACzE,CAAC,CAAC;QACH,OAAO,MAAM,CAAC,IAAI,CAAC;IACvB,CAAC;IAED,IAAI,EAAE;QACF,OAAO,IAAI,CAAC,GAAG,CAAC;IACpB,CAAC;CACJ;AA5DD,2BA4DC","sourcesContent":["import {Client} from \"pg\";\nconst MockPortfolio = require(\"../core/mock-portfolio\");\nimport BaseClient from \"./base-client\";\nimport DBSocket from \"./db-socket\";\nimport Order from \"../types/order\";\nimport OrderId from \"../types/order-id\";\nimport BackTestOptions from \"../types/back-test-options\";\n\nimport { CandlesRequest } from \"../types/candles-request\";\nimport {AccountInfo} from \"../types/portfolio-types\";\n\n\nexport default class DBClient implements BaseClient {\n    private _postGres: Client;\n    private _ws: DBSocket;\n    private _mockPortfolio: any; //todo update\n    private _initialBalance: AccountInfo;\n    constructor(options: BackTestOptions){\n        this._postGres = new Client({\n            host: 'localhost',\n            database: 'bot',\n            user: 'postgres'\n        });\n        this._ws = new DBSocket(options, this._postGres);\n        this._initialBalance = options.balance;\n        this._mockPortfolio = new MockPortfolio(this._initialBalance);\n    }\n\n    async init(){\n        await this._postGres.connect();\n    }\n\n    getSymbol(asset:string, currency:string){\n        return `${asset}-${currency}`;\n    }\n\n    async order(trade:Order){\n        //order should cause an execution report\n        //followed by a portfolio update via the websocket\n        this._mockPortfolio.mockExecute(trade);\n\n        //j03m when we do this, porfolio becomes all NaN\n        return this._ws._sendExecution(this._mockPortfolio.asset,\n            this._mockPortfolio.currency);\n\n    }\n    openOrders(){\n        return Promise.resolve([])\n\n    }\n    cancelOrder(identifier:OrderId){\n        return Promise.resolve();\n    }\n\n    accountInfo(){\n        return Promise.resolve(this._initialBalance);\n    }\n\n    async candles(request:CandlesRequest){\n        //look at start and end times, convert to seconds\n        //select from bars where between start, end\n        const select = `SELECT * FROM bars where openTime >= to_timestamp($1) and openTime <= to_timestamp($2) and symbol = $3 order by openTime asc`;\n        const result = await this._postGres.query({\n            text: select,\n            values: [request.startTime/1000, request.endTime/1000, request.symbol]\n        });\n        return result.rows;\n    }\n\n    get ws () {\n        return this._ws;\n    }\n}\n\n"]}