{"version":3,"file":"gdax-client.js","sourceRoot":"","sources":["gdax-client.ts"],"names":[],"mappings":"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","sourcesContent":["import ApiPackage from \"../types/api-package\";\nimport Candle from \"../types/candle\";\nimport CandleHandler from \"../types/candle-handler\";\nimport BaseClient from \"./base-client\";\nimport { CandlesRequest } from \"../types/candles-request\";\nimport Order from \"../types/order\";\nimport { expandInterval, ExpandedInterval } from \"../utils/util\";\nconst axios = require(\"axios\");\n\n\nfunction makeSymbol(asset: string, currency: string): string {\n    return `${asset}-${currency}`;\n}\n\n\nconst ReconnectingWebSocket = require(\"reconnecting-websocket\");\nconst WS = require(\"ws\");\n// const publicClient = new Gdax.PublicClient(apiURI);\n// const authedClient = new Gdax.AuthenticatedClient(\n//   creds.key,\n//   creds.secret,\n//   creds.passphrase,\n//   apiURI\n// );\n\n\n//todo: get public api working\n//todo: figure out the guts of auth (can\"t be that hard)\n\n/**\n * Receives a loose object from websocket, returns void\n */\ninterface MessageHandler {\n    (data: GdaxMessage): void\n}\n\ninterface Listener {\n    (eventName: string, responder: MessageHandler): void\n}\n\ninterface socketPayload {\n    (payload: string): void\n}\n\ninterface Socket {\n    addEventListener: Listener,\n    send: socketPayload\n}\n\ninterface GdaxMessage {\n    product_id: string\n    data: string\n}\n\ninterface GdaxMatchTick {\n    \"time\": string,\n    \"product_id\": string,\n    \"price\": string\n}\n\n\n\nclass GdaxClient implements BaseClient {\n    private tickHandlers: Map<string, CandleHandler>;\n    private userMessageHandler: MessageHandler;\n    public socket: Socket;\n    private apiUri: string;\n\n    public constructor(credentials: ApiPackage) {\n        //todo: j03m uncomment me, why does this discon and throw?\n        this.socket = new ReconnectingWebSocket(credentials.websocketUri, [], {\n            WebSocket: WS\n        });\n        this.socket.addEventListener(\"message\", this._messageHandler.bind(this));\n        this.socket.addEventListener(\"error\", (e) => {\n            //todo: you will need to reconnect on timeout\n            console.log(\"gdax socket error:\", e);\n        });\n        this.socket.addEventListener(\"close\", () => {\n            console.log(\"gdax socket close!\");\n        });\n        this.socket.addEventListener(\"open\", () => {\n        });\n\n        this.apiUri = credentials.apiUri\n    }\n\n    public init(){\n        return Promise.resolve();\n    }\n\n    public getSymbol(asset:string, currency:string):string{\n        return `${asset}-${currency}`;\n    }\n\n    private _messageHandler(message: GdaxMessage) {\n        const payload = JSON.parse(message.data);\n        if (payload.type === \"ticker\") {\n            const symbol: string = payload.product_id;\n            const handler: CandleHandler | undefined = this.tickHandlers.get(symbol);\n            if (handler) {\n                handler(payload);\n            }\n            else {\n                const msg = `Why are we getting ticks for ${symbol} if we never registered?`;\n                console.log(msg)\n            }\n        }\n        else if (payload.type === \"user\") {\n            console.log(\"User message:\", payload);\n        }\n        else {\n            console.log(\"Unknown message:\", payload);\n        }\n    }\n\n    public order(order: Order):Promise<any> {\n        //?? rest api trade?\n        return Promise.reject(new Error(\"not implemented\"));\n    }\n\n    public accountInfo(): Promise<any> {\n        //?? rest api account info?\n        return Promise.reject(new Error(\"not implemented\"));\n    }\n\n    public cancelOrder(){\n        return Promise.resolve();\n    }\n\n    async candles(candleRequest: CandlesRequest): Promise<Array<Candle>> {\n        const start:string = new Date(candleRequest.startTime).toISOString();\n        const end:string = new Date(candleRequest.endTime).toISOString();\n        const expandedInterval:ExpandedInterval = expandInterval(candleRequest.interval);\n        const granularity:number = expandedInterval.cost/1000;\n        const symbol = candleRequest.symbol;\n        const url:string = `${this.apiUri}/products/${symbol}/candles?start=${start}&end=${end}&granularity=${granularity}`;\n        let response;\n        try{\n            response = await axios.get(url);\n        }catch(ex){\n            console.log(`request for ${url} failed with:`, ex);\n            throw ex;\n        }\n\n        //transform request?\n        return this.gdaxCandleArrayToCandleArray(symbol, response.data);\n\n    }\n\n    gdaxCandleArrayToCandleArray(symbol: string, candleArrays:any):Array<Candle>{\n        return candleArrays.map((candleArray: any) => {\n            //[ time, low, high, open, close, volume ]\n            return {\n                opentime : new Date(candleArray[0] * 1000),\n                symbol: symbol,\n                open: candleArray[3].toString(),\n                high: candleArray[2].toString(),\n                low: candleArray[1].toString(),\n                close: candleArray[4].toString(),\n                volume: candleArray[5].toString()\n            }\n        });\n    }\n\n    get ws() {\n        return {\n            //tick is accepted for consistency but is ignored\n            candles: (asset: string, currency: string, interval: string, cb: CandleHandler) => {\n                const symbol: string = makeSymbol(asset, currency);\n                this.tickHandlers.set(symbol, cb);\n                const payload = JSON.stringify({\n                    \"type\": \"subscribe\",\n                    \"channels\": [{\n                        \"name\": \"ticker\",\n                        \"product_ids\": [symbol]\n                    }]\n                });\n                this.socket.send(payload);\n\n            },\n            user: (cb: MessageHandler) => {\n                this.userMessageHandler = cb;\n                this.socket.send(JSON.stringify({\n                    \"type\": \"subscribe\",\n                    \"channels\": [{\n                        \"name\": \"user\",\n                        \"product_ids\": [\"ETH-EUR\"]\n                    }]\n                }));\n\n            }\n        }\n    }\n}\n\nmodule.exports = GdaxClient;"]}