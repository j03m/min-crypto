{"version":3,"file":"db-socket.js","sourceRoot":"","sources":["db-socket.ts"],"names":[],"mappings":"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","sourcesContent":["import BaseSocket from \"./base-socket\";\nimport {Client} from \"pg\";\nimport config from \"../core/config\";\nimport Candle from \"../types/candle\";\nimport BackTestOptions from \"../types/back-test-options\";\nimport Update, {UpdateHandler} from \"../types/update\";\nimport {Balance} from \"../types/portfolio-types\";\ninterface handler {\n    (candle:Candle):void\n}\n\n\nexport default class DBSocket implements BaseSocket{\n    private _tickStart: number;\n    private _testEnd: number;\n    private _orders: number;\n    private _postGres: Client;\n    private _callBacks: Map<string, handler>;\n    private _interval: any;\n    private _userCb:UpdateHandler;\n\n    constructor(options: BackTestOptions, postGres: Client){\n        this._tickStart = options.testStart;\n        this._testEnd = options.testEnd;\n        this._orders = 0;\n        this._postGres = postGres;\n        this._callBacks = new Map();\n    }\n\n    candles(symbol:string, tick:string, cb:handler):void{\n        this._callBacks.set(symbol, cb);\n        if (this._interval === undefined) {\n            const that:DBSocket = this;\n            async function handler () {\n                clearInterval(that._interval);\n                await that._sendCandles();\n                that._interval = setInterval(handler.bind(that), config.tick);\n            }\n            this._interval = setInterval(handler.bind(this), config.tick);\n        }\n    }\n\n    async _sendCandles():Promise<void>{\n        const ary = Array.from(this._callBacks.entries());\n        let candle;\n        for(let i = 0; i < ary.length; i++){\n            const symbol = ary[i][0];\n            const cb = ary[i][1];\n            candle = await this._getNextCandle(symbol);\n            cb(candle);\n        }\n        if (candle === undefined){\n            throw new Error(\"Couldn't find candle\");\n        }\n        else {\n            //use the LAST candle to update time\n            this._tickStart = candle.opentime.getTime();\n        }\n    }\n\n    async _getNextCandle(symbol:string):Promise<Candle>{\n        //read next candle from the db\n        const select = \"select * from bars where openTime > to_timestamp($1) and openTime <= to_timestamp($2) and symbol = $3 order by openTime asc limit 1\"\n        const result = await this._postGres.query({\n            text: select,\n            values: [this._tickStart/1000, this._testEnd/1000, symbol]\n        });\n\n        if (result.rows.length !== 0){\n            return result.rows[0];\n        } else {\n            console.log(\"last query:\", {\n                text: select,\n                values: [this._tickStart/1000, this._testEnd/1000, symbol]\n            })\n            throw new Error(\"TEST DONE\"); //todo: maybe be a little less ham fisted?\n        }\n\n    }\n    user(cb:UpdateHandler){\n        //portfolio updates\n        this._userCb = cb;\n    }\n\n\n    _sendUserUpdate(update:Update){\n        this._userCb(update);\n    }\n\n    _sendExecution(asset:Balance, currency:Balance){\n        this._orders++;\n        this._sendUserUpdate({\n            eventType: \"executionReport\",\n            orderId: this._orders\n        });\n\n        this._sendUserUpdate({\n            eventType: 'account',\n            eventTime: Date.now(),\n            balances: {\n                [config.asset]: {free: asset.free.toString(), locked: '0.00000000'},\n                [config.currency]: {free: currency.free.toString(), locked: '0.00000000'}\n            }\n        })\n    }\n}"]}